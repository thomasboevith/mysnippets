# Downscaling, normalizing, monochroming and printing scanned sheet music to PDF using imagemagick and img2pdf
for i scan_*.jpg; do convert -grayscale average -scale 50% -brightness-contrast 20x80 $i small/$i; done
img2pdf small/*.jpg --output out.pdf

# Print A4 pages as A3 booklet (print landscape, short-edge flip on A3)
pdfbook2 --paper=a3paper out.pdf --short-edge

# Crop raster images using image magick and convert to PDF using img2pdf
# Upper left  (Lx, Ly) and lower right image coordinates (Rx, Ry) 
for i in *.png; do Lx=486; Ly=0; Rx=2045; Ry=1169; let dx=$Rx-$Lx; let dy=$Ry-$Ly; convert $i -crop ${dx}x${dy}+$Lx+$Ly +repage cropped/$i; done
img2pdf -o out.pdf cropped/*.png

# Printing PDFs to named printer, two-sided
for i in *.pdf; do lp -d PRINTER-NAME -o sides=two-sided-long-edge $i; done

# Bash key-value pairs
for i in k1,v1 k2,v2; do 
  key=${i%,*}
  value=${i#*,}
  echo key=$key value=$value
done

# Check if a file is a JPEG file
if [[ $(file -b 'image.jpg') =~ ^'JPEG ' ]]; then
  echo "JPEG"
else
  echo "NOT A JPEG"
fi

# Running a command on file change using inotify (Install using e.g. sudo apt-get install inotify-tools)
changefile=filename.txt; while inotifywait -e close_write $changefile; do echo "File $changefile changed"; done

# Bash ararys / lists
numthreads=(1 2 4 8 16 32 64 128)
runtimes=()
for t in ${numthreads[@]}; do
  #runtime=$(./pipeline --threads $t)
  runtime=$(echo "scale=8; 1.0 / $t" | bc)
  runtimes+=( $runtime )
done

# Loop over two bash arrays / lists
echo "# numthreads runtimes"
for i in "${!numthreads[@]}"; do
    printf "%3d %.8f\n" "${numthreads[i]}" "${runtimes[i]}"
done

# Converting between decimal and hexadecimal and doing simple arithmetics in bash
dec1=16
hex1=$(printf '%x\n' $dec1)
echo $dec1 $hex1

hex2=fd
dec2=$(( 16#$hex2 ))
echo $dec2 $hex2

dec3=$(( $dec1 + $dec2 ))
hex3=$( printf '%x\n' "$(( 16#$hex1 + 16#$hex2 ))" )
echo $dec3 $hex3

# Mirroring a directory of a certain filetype from website, leaving out index.html
wget -q -nH --cut-dirs=1 -r -np --accept "*.h5" --reject "index.html*" http://example.com/dir/  # Cut-dirs is depth of dir

# Deleting specific files older than a specific time using find
find /path/to/files -type f -iname 'caseinsensitivepattern.*.h5' -mtime +30 -exec echo rm -f {} \;  # Removing files older than 30 days (remove the echo statement)
find /path/to/files -type f -iname 'caseinsensitivepattern.*.h5' -mmin +30 -exec echo rm -f {} \;  # Removing files older than 30 minutes (remove the echo statement)

# Copy today's date to clipboard using xclip (removing newline)
date +'%Y-%m-%d' | xargs echo -n | xclip -selection clipboard

# Random pause from 1 to 20 seconds using sleep in bash
sleep $[ ( $RANDOM % 20 )  + 1 ]s

# Find largest directories non-recursively in bash
find . -maxdepth 1 -type d | while read line; do if test "$line" != "."; then du -kh -sk "$line"; fi; done | sort -rn

# Spellchecking with hunspell and Stavekontrolden
# 1. Download dictionary and affix files from https://stavekontrolden.dk
# 2. Locate hunspell search paths using: hunspell -D
# 3. Put the files in a directory in the search path
# 4. Rename files to: da_DK.dic and da_DK.aff
# 5. Check that the files are available using: hunspell -D
# 6. Spellcheck using e.g.:
>echo "colour" | hunspell -d en_GB -l
>echo "colour" | hunspell -d en_US -l 
colour
>echo "stavekontrold" | hunspell -d da_DK -l 
stavekontrold
>echo "stavekontrol" | hunspell -d da_DK -l 

# Pairwise looping over arguments in bash                                                                                                                                                                                                                                                                                                                  
#!/bin/bash
arguments=( $@ )
for (( i=0; i<${#arguments[@]} ; i+=2 )) ; do
    echo "${arguments[i]}" "${arguments[i+1]}"
done

# Rounding float value in bash
value=3.14159
printf '%.*f\n' 2 "$value"  # Rounded to two decimal places
printf '%.*f\n' 3 "$value"  # Rounded to three decimal places

# Org-mode to PDF with pandoc
pandoc -s text.org -o text.pdf

# Bash for loop
for ((i=0; i<10; i++)); do
  echo $i
done

# Validate a date using GNU date
date -d 2019-02-30 &> /dev/null; exitstatus=$?; if test $exitstatus -eq 0; then echo Valid; else echo Not valid; fi

# Convert between lower case to upper case
echo "Abc" | tr '[:upper:]' '[:lower:]'
echo "Abc" | gawk '{print tolower($0)}'

# Join multiple PDF/ps files
gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -dAutoRotatePages=/None -sOutputFile=output.pdf file1.pdf file2.pdf file3.ps

# Convert PNG images to animated GIF using ImageMagick and gifsicle
convert img1.png img2.png img3.png gif:- | gifsicle --delay=100 --loop --optimize=3 -o animated.gif

# Get links from a web page
lynx -dump -listonly -nonumbers google.com

# Using temporary directory and files
tmpdir=$(mktemp --directory /tmp/mytmpdir.XXXXXXXX)
tmpfile=$(mktemp --tmpdir=$tmpdir mytmpfile.XXXXXXXX)
ls -l $tmpfile
if test -d "$tmpdir"; then
  rm -r $tmpdir  # Cleaning up
fi

# Finding nearest time intervals (rounding down)
# E.g. nearest 5 minute interval from 16:28 is 16:25, nearest 10 minute interval is 16:20
now=$(date +%s)
echo Now: $(date -u -d@$now +%F\ %T)
for i in $(seq 12); do
    echo Nearest $i second interval: $(date -u -d@$(echo "scale=0; $now - ($now % $i)" | bc) +%F\ %T)
    echo Nearest $i minute interval: $(date -u -d@$(echo "scale=0; $now - ($now % ($i * 60))" | bc) +%F\ %T)
    echo Nearest $i hour interval: $(date -u -d@$(echo "scale=0; $now - ($now % ($i * 60 * 60))" | bc) +%F\ %T)
done

# Find newest file based on timestamp in filename
now=$(date +%s)     # Unix time now
interval_s=600      # Inteval between filename timestamps
offset_s=0          # Offset from minute count zero
nearest=$(($now - ($now % $interval_s) + $offset_s))  # Nearest timestamp back in time
backtrack_s=3600    # Search back in time for backtrack_s seconds
end=$(($nearest-$backtrack_s))  # Last timestamp to consider back in time
current=$nearest    # Current timestamp to check
echo now: $(date -u -d@$now +%F\ %T)
echo nearest: $(date -u -d@$nearest +%F\ %T)
echo end: $(date -u -d@$end +%F\ %T)
found=()            # Array of found files
numtofind=2         # Maximum number to find
numfound=0
# Loop over filenames with timestamps
while [ $current -ge $end ]; do   # Until end timestamp reached
    echo current: $(date -u -d@$current +%F\ %T)
    prefix=$(date -u -d@$current +"/path/to/file/%Y-%m-%d/name_")
    suffix=".txt"
    timeformat="%Y-%m-%d_%H%M"
    filename=$prefix$(date -u -d@$current +$timeformat)$suffix
    if [ -e "$filename" ]; then
        found+=( $filename )
        echo filename: $filename FOUND
        numfound=$(($numfound+1))
    else
        echo filename: $filename MISSING
    fi
    if [ "$numfound" -ge "$numtofind" ]; then  # Break out when newest file is found
        echo "Found the maximum number of files: ${found[@]}"
        break
    fi
    current=$(($current-$interval_s))
done

# Reading a file in Python
with open('input.txt') as f:
    data = f.read()
 
# Writing a file in Python
with open('output.txt', 'w') as f:
    f.write('Hello World')
